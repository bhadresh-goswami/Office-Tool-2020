@model IEnumerable<DashReportingTool.Models.TaskMaster>
@using DashReportingTool.Models
@{
    ViewBag.Title = "Task List";
    Layout = "~/Views/Shared/_defaultLayout.cshtml";
    var db = new dbReportingEntities();
}


@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
    <form>
        <table class="table table-light">
            <tr>
                <th>Expert Name</th>
                <th>Start Date</th>
                <th>End Date</th>
            </tr>
            <tr>
                <td>
                    @{

                        var experts = db.ExpertMasters.ToList();

                    }
                    <select class="form-control" id="id" name="id">
                        <option>Select Expert</option>
                        @foreach (var item in experts)
                        {
                            <option value="@item.ExpertId">@item.ExpertName</option>
                        }
                    </select>
                </td>
                <td>
                    <input type="date" id="startDate" name="startDate" class="form-control" />
                </td>
                <td>
                    <input type="date" id="endDate" name="endDate" class="form-control" />
                </td>
            </tr>
            <tr>
                <td colspan="3" style="text-align:right">
                    <button class="btn btn-info" style="width:130px" type="submit">Filter</button>
                </td>
            </tr>
        </table>
    </form>

<table class="table dttable table-responsive-sm">
    <thead>
        <tr>
            <th>
                Assign By
            </th>
            <th>
                Completed By
            </th>

            <th>
                @Html.DisplayNameFor(model => model.TaskTitleMaster.TaskTitle)
            </th>
            <th>
                Assinged/DeadLine
            </th>
            @*<th>
                    @Html.DisplayNameFor(model => model.TaskDone)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.TaskDetails)
                </th>*@
            <th>
                @Html.DisplayNameFor(model => model.EstimateTime)
            </th>
            <th>
                Time
            </th>
            <th>
                @Html.DisplayNameFor(model => model.TimeTaken)
            </th>
            @*<th>
                    @Html.DisplayNameFor(model => model.AssignedTask)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.IsStartedTask)
                </th>*@
            @*<th>
                    @Html.DisplayNameFor(model => model.DeadLine)
                </th>*@

            <th>
                @Html.DisplayNameFor(model => model.StatusMaster.StatusTitle)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            string cls = "background-color:yellow;color:red";

            if (item.TaskDone)
            {
                cls = "background-color:green;color:white";
            }
            <tr style=" @cls">
                <td>
                    @Html.DisplayFor(modelItem => item.ExpertMaster.ExpertName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ExpertMaster1.ExpertName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TaskTitleMaster.TaskTitle)
                </td>
                <td>
                    @item.TaskDate.ToShortDateString()
                    /@{
                        var d = ((DateTime)item.DeadLine).ToShortDateString();
                    }
                    @d

                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.TaskDone)
                    </td>*@
                @*<td>
                        @Html.DisplayFor(modelItem => item.TaskDetails)
                    </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.EstimateTime)
                </td>
                <td>
                    @{
                        string[] t = item.TaskStartTime.ToString().Split(':');
                        string times = t[0] + ":" + t[1];

                        var timeFromInput = DateTime.ParseExact(times, "HH:mm", null, System.Globalization.DateTimeStyles.None);
                        string timeOutputS = timeFromInput.ToString(
                            "h:mm tt",
                            System.Globalization.CultureInfo.InvariantCulture);

                        t = item.TaskEndTime.ToString().Split(':');
                        times = t[0] + ":" + t[1];

                        timeFromInput = DateTime.ParseExact(times, "HH:mm", null, System.Globalization.DateTimeStyles.None);
                        string timeOutputE = timeFromInput.ToString(
                            "h:mm tt",
                            System.Globalization.CultureInfo.InvariantCulture);

                    }
                    @timeOutputS/@timeOutputE
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TimeTaken)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.AssignedTask)
                    </td>*@
                @*<td>
                        @Html.DisplayFor(modelItem => item.IsStartedTask)
                    </td>*@


                <td>
                    @Html.DisplayFor(modelItem => item.StatusMaster.StatusTitle)
                </td>
                <td>
                    @*@Html.ActionLink("Edit", "Edit", new { id = item.TaskId }) |
                        @Html.ActionLink("Details", "Details", new { id = item.TaskId }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.TaskId })*@
                </td>
            </tr>
        }
    </tbody>
</table>
